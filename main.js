// Generated by Haxe 4.0.2
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var server = new js_npm_Express();
	server.use(js_npm_express_BodyParser.json({ limit : "5mb", type : "application/json"}));
	server.use(new js_npm_express_Session({ secret : "shhhh, very secret"}));
	var router = js_npm_express_Router();
	router.get("/random",function(req,res) {
		res.writeHead(200,{ "Content-Type" : "text/plain"});
		res.end(Std.string(Math.random()));
	});
	router.post("/login",function(req1,res1) {
		if(req1.body.username == "theuser" && req1.body.password == "thepassword") {
			res1.writeHead(200,{ "Content-Type" : "text/plain"});
			req1.session.authenticated = true;
			res1.end("OK");
			return;
		} else {
			req1.session.authenticated = false;
			res1.send(401,"Unauthorized");
			return;
		}
	});
	router.get("/status",function(req2,res2) {
		res2.writeHead(200,{ "Content-Type" : "text/plain"});
		console.log("Main.hx:40:",req2.session.authenticated);
		res2.end(req2.session.authenticated ? "AuthentifiÃ©" : "Visiteur");
	});
	server.use(router);
	server.listen(1337,"127.0.0.1");
	console.log("Server running at http://127.0.0.1:1337/");
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_npm_Express = require("express");
var js_npm_express_BodyParser = require("body-parser");
var js_npm_express__$Route_Route_$Impl_$ = {};
js_npm_express__$Route_Route_$Impl_$.__name__ = true;
js_npm_express__$Route_Route_$Impl_$.fromEReg = function(e) {
	return e.r;
};
var js_npm_express_Router = require("express").Router;
var js_npm_express_Session = require("express-session");
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Main.logged = new haxe_ds_StringMap();
Main.main();
})({});
